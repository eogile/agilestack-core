// Code generated by protoc-gen-go.
// source: registry.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	registry.proto

It has these top-level messages:
	Empty
	GiveStatusRequest
	NetResponse
	NameRequest
	Plugins
	GetPluginResponse
	Plugin
	InstallPluginRequest
	RegisterResponse
	Ping
	Pong
	NewPluginRequest
	NewPluginResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type PluginStatus int32

const (
	PluginStatus_NOTINSTALLED          PluginStatus = 0
	PluginStatus_OK                    PluginStatus = 1
	PluginStatus_CURRENTLYNOTREACHABLE PluginStatus = 2
)

var PluginStatus_name = map[int32]string{
	0: "NOTINSTALLED",
	1: "OK",
	2: "CURRENTLYNOTREACHABLE",
}
var PluginStatus_value = map[string]int32{
	"NOTINSTALLED": 0,
	"OK":           1,
	"CURRENTLYNOTREACHABLE": 2,
}

func (x PluginStatus) String() string {
	return proto1.EnumName(PluginStatus_name, int32(x))
}

type Responses int32

const (
	Responses_ACK   Responses = 0
	Responses_ERROR Responses = 1
)

var Responses_name = map[int32]string{
	0: "ACK",
	1: "ERROR",
}
var Responses_value = map[string]int32{
	"ACK":   0,
	"ERROR": 1,
}

func (x Responses) String() string {
	return proto1.EnumName(Responses_name, int32(x))
}

type Empty struct {
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}

type GiveStatusRequest struct {
	Name   string       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Status PluginStatus `protobuf:"varint,2,opt,name=status,enum=proto.PluginStatus" json:"status,omitempty"`
}

func (m *GiveStatusRequest) Reset()         { *m = GiveStatusRequest{} }
func (m *GiveStatusRequest) String() string { return proto1.CompactTextString(m) }
func (*GiveStatusRequest) ProtoMessage()    {}

type NetResponse struct {
	Response Responses `protobuf:"varint,1,opt,name=response,enum=proto.Responses" json:"response,omitempty"`
	Details  string    `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`
}

func (m *NetResponse) Reset()         { *m = NetResponse{} }
func (m *NetResponse) String() string { return proto1.CompactTextString(m) }
func (*NetResponse) ProtoMessage()    {}

type NameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *NameRequest) Reset()         { *m = NameRequest{} }
func (m *NameRequest) String() string { return proto1.CompactTextString(m) }
func (*NameRequest) ProtoMessage()    {}

type Plugins struct {
	Plugins []*Plugin `protobuf:"bytes,1,rep,name=plugins" json:"plugins,omitempty"`
}

func (m *Plugins) Reset()         { *m = Plugins{} }
func (m *Plugins) String() string { return proto1.CompactTextString(m) }
func (*Plugins) ProtoMessage()    {}

func (m *Plugins) GetPlugins() []*Plugin {
	if m != nil {
		return m.Plugins
	}
	return nil
}

type GetPluginResponse struct {
	Response *NetResponse `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	Plugin   *Plugin      `protobuf:"bytes,2,opt,name=plugin" json:"plugin,omitempty"`
}

func (m *GetPluginResponse) Reset()         { *m = GetPluginResponse{} }
func (m *GetPluginResponse) String() string { return proto1.CompactTextString(m) }
func (*GetPluginResponse) ProtoMessage()    {}

func (m *GetPluginResponse) GetResponse() *NetResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *GetPluginResponse) GetPlugin() *Plugin {
	if m != nil {
		return m.Plugin
	}
	return nil
}

type Plugin struct {
	Name         string       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	PluginStatus PluginStatus `protobuf:"varint,3,opt,name=pluginStatus,enum=proto.PluginStatus" json:"pluginStatus,omitempty"`
}

func (m *Plugin) Reset()         { *m = Plugin{} }
func (m *Plugin) String() string { return proto1.CompactTextString(m) }
func (*Plugin) ProtoMessage()    {}

type InstallPluginRequest struct {
	Plugin *Plugin `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	Cmd    string  `protobuf:"bytes,2,opt,name=cmd" json:"cmd,omitempty"`
}

func (m *InstallPluginRequest) Reset()         { *m = InstallPluginRequest{} }
func (m *InstallPluginRequest) String() string { return proto1.CompactTextString(m) }
func (*InstallPluginRequest) ProtoMessage()    {}

func (m *InstallPluginRequest) GetPlugin() *Plugin {
	if m != nil {
		return m.Plugin
	}
	return nil
}

type RegisterResponse struct {
	Response  Responses `protobuf:"varint,1,opt,name=response,enum=proto.Responses" json:"response,omitempty"`
	PingTopic string    `protobuf:"bytes,2,opt,name=pingTopic" json:"pingTopic,omitempty"`
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto1.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}

type Ping struct {
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto1.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}

type Pong struct {
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto1.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}

type NewPluginRequest struct {
	Directory string `protobuf:"bytes,1,opt,name=directory" json:"directory,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Url       string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
}

func (m *NewPluginRequest) Reset()         { *m = NewPluginRequest{} }
func (m *NewPluginRequest) String() string { return proto1.CompactTextString(m) }
func (*NewPluginRequest) ProtoMessage()    {}

type NewPluginResponse struct {
	Status bool `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *NewPluginResponse) Reset()         { *m = NewPluginResponse{} }
func (m *NewPluginResponse) String() string { return proto1.CompactTextString(m) }
func (*NewPluginResponse) ProtoMessage()    {}

func init() {
	proto1.RegisterEnum("proto.PluginStatus", PluginStatus_name, PluginStatus_value)
	proto1.RegisterEnum("proto.Responses", Responses_name, Responses_value)
}
